************************************************************Java Script*********************************************************************
- Watched daily JavaScript video and what I have Leared is described below.

*JavaScript Parsers and Engines.
- JavaScript parser and engines.
- JS Engine : It is the program that execute Javascript code.
- Execution of our JavaScript code is like this : Code --> Parser --> ConversionMachineCode --> Code Runs.

*Execution Contexts and Execution Stack.
- Execution Contexts : A box, a container, or a wrapper which stores variables in which a piece of our code is evaluated and executed.
- The default : Global Execution Context - code that is not inside any function.Associated with the global object.
	     In browser that's the window object.
- Execution stack : A stack data strucutre in which the new execution context is pushed on top of the 
                             Global Execution Context.

*Execution context Creation and Exection Phase.
- Variable Object (VO) : a). The argument object is created,containing all the arguments that were passed into the function.
		    b). Code is scanned for function declarations : for each function , a property is created in varibale
		         pointing to function.
		    c).Variable declaration.	      

1)Creation Phase : A) Creation of the variable object (VO).
	            B) Creation of scope chain.
	            C) Determine value of the 'this' variable.
2)Execution Phase : The code of the function that generated the current execution context is ran line bu line.

*Function Hoisting
ex:. Age(1989);	
       function Age(year){console.log.(2021-year);}
*Variable Hoisting
ex:. console.log(age);
       var age = 23;

*Scoping Chain
- Where can we access a certain variable.Each new function creates a scope. The space in which the variable
  is defined are accessible.
- Lexical Scoping : A function that is lexically within another function gets access to the scope of the outer function.
- Execution Stack Vs Scope Chain : Main differnce between this term is in case of execution stack the order in which 
  function are called.And in Scope chain the order in which fumction are written.

*This keyword 
- Regular function call : This keyword points at the global object(the window object,in browser)
- Method call : This variable points to the objects that is calling the method.
- this keyword is not assigned a value until a function where it is defined is actually called.
ex:. Window object in this case;
        console.log(this);

*Objects and propertis 
- JavaScript object are defined in KEY : VALUE formate.
- //Object Literal
	var john = {
		firstName: 'john',
		family: ['Jane', 'Mark', 'Bob', 'Emily'],};
-//new object syntax 
	var jane = new Object();
	jane.firstName = 'jane';

*Loops and Iteration
- Loops are handy, if you want to run the same code over and over again, each time with a different value.
- for loop and while loop.
- for loop syntax :
	for (start; condition; increament) {
	  // code block to be executed}
- while loop syntax :
	while (condition) {
	  // code block to be executed}
- break : As we have alrady learned about break in switch case, here it is the also stop the exction and 
            come out from the loop.
- continue : It just skip the current iteration and continue futher exection in loop.